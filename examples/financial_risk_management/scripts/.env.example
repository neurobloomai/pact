# .env.example - Environment variables template

# Application Settings
APP_NAME="PACT Financial Risk Management"
ENVIRONMENT=development
DEBUG=true
SECRET_KEY=your-secret-key-change-in-production

# Server Configuration
HOST=0.0.0.0
PORT=8000
LOG_LEVEL=DEBUG

# Database Configuration
DATABASE_URL=postgresql://postgres:password@localhost:5432/pact_risk
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=20

# Redis Configuration  
REDIS_URL=redis://localhost:6379/0
REDIS_MAX_CONNECTIONS=100

# PACT Framework Settings
PACT_MAX_RETRIES=3
PACT_TIMEOUT_SECONDS=30
PACT_CONSENSUS_TIMEOUT=5

# Risk Calculation Settings
MONTE_CARLO_SIMULATIONS=10000
VAR_CONFIDENCE_LEVELS=0.95,0.99,0.999
STRESS_TEST_SCENARIOS=100

# Market Data Provider
MARKET_DATA_PROVIDER=bloomberg
MARKET_DATA_API_KEY=your-api-key-here
MARKET_DATA_CACHE_TTL=300

# Security Settings
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# Monitoring & Alerting
PROMETHEUS_ENABLED=true
SENTRY_DSN=your-sentry-dsn-here
ALERT_EMAIL_ENABLED=false
ALERT_EMAIL_RECIPIENTS=admin@company.com

# Feature Flags
ENABLE_REAL_TIME_RISK=true
ENABLE_STRESS_TESTING=true
ENABLE_BACKTESTING=true
ENABLE_ML_MODELS=true 1
fi

# Build Docker image
echo "üî® Building Docker image..."
docker build -t neurobloom/pact-risk:$VERSION .

# Tag for registry
docker tag neurobloom/pact-risk:$VERSION neurobloom/pact-risk:latest

# Push to registry
echo "üì§ Pushing to container registry..."
docker push neurobloom/pact-risk:$VERSION
docker push neurobloom/pact-risk:latest

# Deploy to Kubernetes
echo "‚ò∏Ô∏è  Deploying to Kubernetes cluster..."

# Select correct namespace
NAMESPACE="pact-risk-$ENVIRONMENT"

# Apply Kubernetes manifests
kubectl apply -f deployment/kubernetes/namespace.yaml
kubectl apply -f deployment/kubernetes/configmap.yaml
kubectl apply -f deployment/kubernetes/secrets.yaml
kubectl apply -f deployment/kubernetes/deployment.yaml
kubectl apply -f deployment/kubernetes/service.yaml
kubectl apply -f deployment/kubernetes/ingress.yaml

# Wait for deployment to complete
echo "‚è≥ Waiting for deployment to complete..."
kubectl rollout status deployment/pact-risk-api -n $NAMESPACE --timeout=300s

# Run post-deployment checks
echo "üîç Running post-deployment health checks..."
sleep 30

# Check if pods are running
RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -l app=pact-risk-api --field-selector=status.phase=Running --no-headers | wc -l)
EXPECTED_PODS=3

if [ "$RUNNING_PODS" -eq "$EXPECTED_PODS" ]; then
    echo "‚úÖ All $EXPECTED_PODS pods are running"
else
    echo "‚ùå Only $RUNNING_PODS out of $EXPECTED_PODS pods are running"
    kubectl get pods -n $NAMESPACE
    exit
